{"version":3,"sources":["app/initialize.js"],"names":["document","addEventListener","$","require","b","p","Puzzles","words","prototype","getRandom","Math","floor","random","length","PlayerInfo","numWins","numLosses","incrementWins","text","incrementLosses","Guesses","numberOfGuesses","numBadGuesses","lettersGuessed","decrementGuesses","isLetterChosenAlready","letter","indexOf","PuzzleLetter","c","character","isSolved","print","append","handleGuess","guess","ScaffoldImage","imgPath","total","reset","current","changePicture","attr","nextPicture","GallowsMusic","audioTag","createElement","volume","playSuccess","pause","src","play","playFailure","AlertMessage","alertElement","messageTitle","messageElement","winningMessage","solution","callback","modal","on","e","game","losingMessage","HangmanGame","music","gamePuzzles","winsNLosses","alerts","gameImages","guessingStats","puzzle","puzzleLetters","i","push","html","guessed","correctGuess","hasWon","result","hasLost","gameCompleted","handleWin","handleLoss","keyup","event","charTyped","key","toLowerCase","test"],"mappings":"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","file":"public/app.js","sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\n\n  let $ = require('jquery');\n  let b = require('bootstrap');\n  let p = require('popper.js');\n\n  // a puzzle object, essentially an array with the ability to return a \n  // random member of the list\n  function Puzzles() {\n    this.words = [\"gallows\",\n      \"scaffold\",\n      \"execution\",\n      \"hangman\",\n      \"rope\",\n      \"justice\",\n      \"crime\",\n      \"hanging\",\n      \"drop\",\n      \"criminal\",\n      \"neck\",\n      \"asphyxiation\",\n      \"punishment\",\n      \"strangulation\",\n      \"capital\",\n      \"felon\",\n      \"death\",\n      \"trapdoor\",\n      \"snapped\",\n      \"decapitation\",\n      \"slack\",\n      \"noose\",\n      \"tighten\",\n      \"pole\"];\n  }\n\n  Puzzles.prototype.getRandom = function () {\n    return this.words[Math.floor(Math.random() * this.words.length)];\n  };\n\n\n\n  // playerInfo object will keep track of wins, losses, and printing them\n  function PlayerInfo() {\n    this.numWins = 0;\n    this.numLosses = 0;\n  }\n\n  PlayerInfo.prototype.incrementWins = function () {\n    this.numWins++;\n    $(\"#numWins\").text(this.numWins);\n  };\n\n  PlayerInfo.prototype.incrementLosses = function () {\n    this.numLosses++;\n    $(\"#numLosses\").text(this.numLosses);\n  };\n\n\n\n  // Guesses will take care of the number of guesses and keeping track of letters\n  function Guesses(numberOfGuesses) {\n    this.numBadGuesses = numberOfGuesses;\n    this.lettersGuessed = \"\";\n    $(\"#lettersGuessed\").text(this.lettersGuessed);\n    $(\"#numGuessesLeft\").text(this.numBadGuesses);\n  }\n\n  Guesses.prototype.decrementGuesses = function () {\n    this.numBadGuesses--;\n    $(\"#numGuessesLeft\").text(this.numBadGuesses);\n  };\n\n  Guesses.prototype.isLetterChosenAlready = function (letter) {\n    if (this.lettersGuessed.indexOf(letter) == -1) {\n      // the letter is not found - add to list\n      this.lettersGuessed += \" \" + letter;\n      // update the letters guessed to the screen\n      $(\"#lettersGuessed\").text(this.lettersGuessed);\n      return false;  // return false, wasn't chosen already\n    }\n    // else - letter already existed\n    return true;\n  };\n\n\n\n  // this class will take care of each letter in the puzzle\n  // much easier to have each letter to be responsible for \n  // whether or not it is solved and how it should be printed\n  function PuzzleLetter(c) {\n    this.character = c;\n    this.isSolved = false;\n  }\n\n  PuzzleLetter.prototype.print = function () {\n    if (this.isSolved) {\n      $(\"#wordLocation\").append(\"<span>\" + this.character + \"</span>\");\n    }\n    else {\n      $(\"#wordLocation\").append(\"<span>_</span>\");\n    }\n  };\n\n  PuzzleLetter.prototype.handleGuess = function (guess) {\n    if (guess == this.character) {\n      this.isSolved = true;\n      return true;\n    }\n    return false;\n  };\n\n\n\n  // this object will handle the updating of the scaffold image\n  function ScaffoldImage() {\n    this.imgPath = \"images/\";\n    this.total = 8;\n    this.reset();\n  }\n\n  ScaffoldImage.prototype.reset = function () {\n    this.current = 0;\n    this.changePicture();\n  };\n\n  ScaffoldImage.prototype.changePicture = function () {\n    $(\"#scaffold\").attr('src', this.imgPath + 'hangman' + this.current + '.jpg');\n  };\n\n  ScaffoldImage.prototype.nextPicture = function () {\n    this.current++;\n    this.changePicture();\n  };\n\n\n\n  // this object will play some gallows music depending on if you\n  // win or lose\n  function GallowsMusic() {\n    this.audioTag = document.createElement('audio');\n    this.audioTag.volume = 0.4;\n  }\n\n  GallowsMusic.prototype.playSuccess = function () {\n    this.audioTag.pause();\n    this.audioTag.src = \"gallowsPole.mp3\";\n    this.audioTag.play();\n  };\n  GallowsMusic.prototype.playFailure = function () {\n    this.audioTag.pause();\n    this.audioTag.src = \"tomDula.mp3\";\n    this.audioTag.play();\n  };\n\n\n\n\n  // this object will handle the send of alert style\n  // messages to the user when they win or lose\n  function AlertMessage() {\n    debugger\n    this.alertElement = $(\"#myModal\");\n    this.messageTitle = $(\".modal-title\");;\n    this.messageElement = $(\".modal-body p\");\n    //this.alertElement.hide();   \n  }\n\n  AlertMessage.prototype.winningMessage = function (solution, callback) {\n    this.messageElement.text(\"It was \" + solution + \".\");\n    this.messageTitle.text(\"Congratulations!\");\n    this.alertElement.modal();\n    this.alertElement.on('hidden.bs.modal', function (e) {\n      game.reset();\n    });\n  };\n\n  AlertMessage.prototype.losingMessage = function (solution, callback) {\n    this.messageElement.text(\"It was \" + solution + \".\");\n    this.messageTitle.text(\"Sorry!\");\n    this.alertElement.modal();\n    this.alertElement.on('hidden.bs.modal', function (e) {\n      game.reset();\n    });\n  };\n\n\n\n  // this is the over all game object that pulls all the pieces together\n  function HangmanGame() {\n    this.music = new GallowsMusic();\n    this.gamePuzzles = new Puzzles();  // only create once, no need to reset\n    this.winsNLosses = new PlayerInfo(); // create once, don't reset and lose info\n    this.alerts = new AlertMessage();\n    this.gameImages = new ScaffoldImage();\n\n    this.reset();\n\n  }\n\n  // handles the rest of the initialization,\n  // also resets variables at the end of a game for a new game\n  HangmanGame.prototype.reset = function () {\n    this.guessingStats = new Guesses(this.gameImages.total);\n    this.gameImages.reset();\n    this.puzzle = this.gamePuzzles.getRandom();\n    this.puzzleLetters = [];\n\n    for (var i = 0; i < this.puzzle.length; i++) {\n      this.puzzleLetters.push(new PuzzleLetter(this.puzzle[i]));\n    }\n    this.print();\n  };\n\n  // handles updating of the puzzle in the html, clears and\n  // calls each letter to print itself\n  HangmanGame.prototype.print = function () {\n    // first clear the existing stuff that was already printed\n    $(\"#wordLocation\").html(\"\");\n    // now ask each letter to print itself if solved\n    for (var i = 0; i < this.puzzleLetters.length; i++) {\n      this.puzzleLetters[i].print();\n    }\n  };\n\n  // handles the guessing\n  HangmanGame.prototype.guessed = function (c) {\n    if (!this.guessingStats.isLetterChosenAlready(c)) {\n      var correctGuess = false;\n      // ask each letter if they match the guess\n      for (var i = 0; i < this.puzzle.length; i++) {\n        // it was a correct guess if even one was correct - use OR\n        correctGuess = this.puzzleLetters[i].handleGuess(c) || correctGuess;\n      }\n      // if the letter isn't in the puzzle, punish them\n      if (!correctGuess) {\n        this.guessingStats.decrementGuesses();\n        this.gameImages.nextPicture();\n      }\n      else { // if they were correct, then update the html\n        this.print();\n      }\n    }\n  };\n\n  // this is probably a terribly inefficient method to determine if they \n  // have won, but it works and the for loops are limited in length\n  // to the short length of the puzzle words\n  HangmanGame.prototype.hasWon = function () {\n    var result = true;\n    // ANDing together the return values from isSolved on each letter\n    // if they are all true then AND is true, if even one is false,\n    // then the result is false and they haven't won\n    for (var i = 0; i < this.puzzleLetters.length; i++) {\n      result = this.puzzleLetters[i].isSolved && result;\n    }\n    return result;\n  };\n\n  // much easier to determine if they have lost, check the number of\n  // available guesses\n  HangmanGame.prototype.hasLost = function () {\n    if (this.guessingStats.numBadGuesses < 1) {\n      return true;\n    }\n    return false;\n  };\n\n  // this method checks if they have won or lost\n  HangmanGame.prototype.gameCompleted = function () {\n    if (this.hasLost() || this.hasWon()) {\n      return true;\n    }\n    return false;\n  };\n\n  HangmanGame.prototype.handleWin = function () {\n    this.music.playSuccess();\n    this.winsNLosses.incrementWins();\n    this.alerts.winningMessage(game.puzzle, game.reset);\n\n  }\n  HangmanGame.prototype.handleLoss = function () {\n    this.music.playFailure();\n    this.winsNLosses.incrementLosses();\n    this.alerts.losingMessage(game.puzzle, game.reset);\n\n  }\n\n  debugger\n  var game = new HangmanGame();\n\n\n\n  $(document).keyup(function (event) {\n    // check they aren't being silly and using shift or caps lock\n    var charTyped = event.key.toLowerCase();\n\n    // is it a letter\n    if (charTyped.length == 1 && /[a-z]/i.test(charTyped) && !game.gameCompleted()) {\n      //console.log(charTyped + \" pressed - play the game\");\n      game.guessed(charTyped);\n\n      if (game.gameCompleted()) {\n\n        if (game.hasLost()) {\n          game.handleLoss();\n        }\n        else {\n          game.handleWin();\n        }\n      }\n    }\n    else { // else not a letter\n      //console.log(charTyped + \" pressed - not a letter\");\n    }\n\n  });\n\n\n\n});\n"]}